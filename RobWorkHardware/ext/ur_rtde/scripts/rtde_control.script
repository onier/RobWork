def rtde_control():

    global force_mode_type = 2
    global selection_vector = [0, 0, 0, 0, 0, 0]
    global task_frame = p[0, 0, 0, 0, 0, 0]
    global wrench = [0, 0, 0, 0, 0, 0]
    global limits = [0, 0, 0, 0, 0, 0]
    global is_servoing = 0
    global is_speeding = 0
    global servo_target = [0, 0, 0, 0, 0, 0]
    global servo_time = 0.2
    global servo_lookahead_time = 0.1
    global servo_gain = 300

    global speed_type = 0
    global speed_target = [0, 0, 0, 0, 0, 0]
    global speed_acceleration = 0.5
    global speed_time = 0.5

    global servo_thrd = 0
    global speed_thrd = 0

    thread speed_thread():
        while (True):
            if speed_type == 0:
                if speed_time > 0:
                    speedl(speed_target, a=speed_acceleration, t=speed_time)
                else:
                    speedl(speed_target, a=speed_acceleration)
                end
            else:
                if speed_time > 0:
                    speedj(speed_target, a=speed_acceleration, t=speed_time)
                else:
                    speedj(speed_target, a=speed_acceleration)
                end
            end
        end
    end

    thread servo_thread():
        while (True):
            servoj(servo_target, t=servo_time, lookahead_time=servo_lookahead_time, gain=servo_gain)
        end
    end

    def signal_ready(val):
        write_output_integer_register(0, val)
    end

    def rtde_cmd():
        return read_input_integer_register(0)
    end

    def process_cmd():
        cmd = read_input_integer_register(0)

        if cmd == 1:
            textmsg("movej")
            q = [0, 0, 0, 0, 0, 0]
            q[0] = read_input_float_register(0)
            q[1] = read_input_float_register(1)
            q[2] = read_input_float_register(2)
            q[3] = read_input_float_register(3)
            q[4] = read_input_float_register(4)
            q[5] = read_input_float_register(5)
            velocity = read_input_float_register(6)
            acceleration = read_input_float_register(7)
            textmsg("Target q:")
            textmsg(q)
            movej(q, a=acceleration, v=velocity)
            textmsg("movej done")
        elif cmd == 2:
            textmsg("movej_ik")
            pose = p[0, 0, 0, 0, 0, 0]
            pose[0] = read_input_float_register(0)
            pose[1] = read_input_float_register(1)
            pose[2] = read_input_float_register(2)
            pose[3] = read_input_float_register(3)
            pose[4] = read_input_float_register(4)
            pose[5] = read_input_float_register(5)
            velocity = read_input_float_register(6)
            acceleration = read_input_float_register(7)
            textmsg("Target pose:")
            textmsg(pose)
            q = get_inverse_kin(pose)
            textmsg("Target q:")
            textmsg(q)
            movej(q, a=acceleration, v=velocity)
            textmsg("movej_ik done")
        elif cmd == 3:
            textmsg("movel")
            pose = p[0, 0, 0, 0, 0, 0]
            pose[0] = read_input_float_register(0)
            pose[1] = read_input_float_register(1)
            pose[2] = read_input_float_register(2)
            pose[3] = read_input_float_register(3)
            pose[4] = read_input_float_register(4)
            pose[5] = read_input_float_register(5)
            velocity = read_input_float_register(6)
            acceleration = read_input_float_register(7)
            textmsg("Target pose:")
            textmsg(pose)
            movel(pose, a=acceleration, v=velocity)
            textmsg("movel done")
        elif cmd == 4:
            textmsg("movel_fk")
            q = [0, 0, 0, 0, 0, 0]
            q[0] = read_input_float_register(0)
            q[1] = read_input_float_register(1)
            q[2] = read_input_float_register(2)
            q[3] = read_input_float_register(3)
            q[4] = read_input_float_register(4)
            q[5] = read_input_float_register(5)
            velocity = read_input_float_register(6)
            acceleration = read_input_float_register(7)
            textmsg("Target q:")
            textmsg(q)
            movel(q, a=acceleration, v=velocity)
            textmsg("movel_fk done")
        elif cmd == 5:
            textmsg("movec")
            pose_via = p[0, 0, 0, 0, 0, 0]
            pose_via[0] = read_input_float_register(0)
            pose_via[1] = read_input_float_register(1)
            pose_via[2] = read_input_float_register(2)
            pose_via[3] = read_input_float_register(3)
            pose_via[4] = read_input_float_register(4)
            pose_via[5] = read_input_float_register(5)
            pose_to = p[0, 0, 0, 0, 0, 0]
            pose_to[0] = read_input_float_register(6)
            pose_to[1] = read_input_float_register(7)
            pose_to[2] = read_input_float_register(8)
            pose_to[3] = read_input_float_register(9)
            pose_to[4] = read_input_float_register(10)
            pose_to[5] = read_input_float_register(11)
            velocity = read_input_float_register(12)
            acceleration = read_input_float_register(13)
            movec_mode = read_input_integer_register(1)
            textmsg("pose_via:")
            textmsg(pose_via)
            textmsg("pose_to:")
            textmsg(pose_to)
            movec(pose_to, pose_via, a=acceleration, v=velocity, mode=movec_mode)
            stopl(10)
            textmsg("movec done")
        elif cmd == 6:
            textmsg("force_mode_start")
            force_mode_type = read_input_integer_register(1)
            selection_vector[0] = read_input_integer_register(2)
            selection_vector[1] = read_input_integer_register(3)
            selection_vector[2] = read_input_integer_register(4)
            selection_vector[3] = read_input_integer_register(5)
            selection_vector[4] = read_input_integer_register(6)
            selection_vector[5] = read_input_integer_register(7)

            task_frame[0] = read_input_float_register(0)
            task_frame[1] = read_input_float_register(1)
            task_frame[2] = read_input_float_register(2)
            task_frame[3] = read_input_float_register(3)
            task_frame[4] = read_input_float_register(4)
            task_frame[5] = read_input_float_register(5)

            wrench[0] = read_input_float_register(6)
            wrench[1] = read_input_float_register(7)
            wrench[2] = read_input_float_register(8)
            wrench[3] = read_input_float_register(9)
            wrench[4] = read_input_float_register(10)
            wrench[5] = read_input_float_register(11)

            limits[0] = read_input_float_register(12)
            limits[1] = read_input_float_register(13)
            limits[2] = read_input_float_register(14)
            limits[3] = read_input_float_register(15)
            limits[4] = read_input_float_register(16)
            limits[5] = read_input_float_register(17)

            force_mode(task_frame, selection_vector, wrench, force_mode_type, limits)
            textmsg("force_mode started")
        elif cmd == 7:
            textmsg("force_mode_update")
            wrench[0] = read_input_float_register(0)
            wrench[1] = read_input_float_register(1)
            wrench[2] = read_input_float_register(2)
            wrench[3] = read_input_float_register(3)
            wrench[4] = read_input_float_register(4)
            wrench[5] = read_input_float_register(5)
            force_mode(task_frame, selection_vector, wrench, force_mode_type, limits)
            textmsg("force_mode_update done")
        elif cmd == 8:
            textmsg("force_mode_stop")
            end_force_mode()
            stopl(10)
            textmsg("force_mode stopped")
        elif cmd == 9:
            textmsg("zero_ftsensor")
            zero_ftsensor()
            textmsg("ftsensor zeroed")
        elif cmd == 10:
            textmsg("speedj")
            qd = [0, 0, 0, 0, 0, 0]
            qd[0] = read_input_float_register(0)
            qd[1] = read_input_float_register(1)
            qd[2] = read_input_float_register(2)
            qd[3] = read_input_float_register(3)
            qd[4] = read_input_float_register(4)
            qd[5] = read_input_float_register(5)

            enter_critical
            speed_type = 1
            speed_acceleration = read_input_float_register(6)
            speed_time = read_input_float_register(7)
            speed_target = qd
            exit_critical

            if is_speeding == 0:
                is_speeding = 1
                if speed_thrd == 0:
                    global speed_thrd = run speed_thread()
                end
            end
            textmsg("speedj done")
        elif cmd == 11:
            textmsg("speedl")
            xd = [0, 0, 0, 0, 0, 0]
            xd[0] = read_input_float_register(0)
            xd[1] = read_input_float_register(1)
            xd[2] = read_input_float_register(2)
            xd[3] = read_input_float_register(3)
            xd[4] = read_input_float_register(4)
            xd[5] = read_input_float_register(5)
            enter_critical
            speed_type = 0
            speed_acceleration = read_input_float_register(6)
            speed_time = read_input_float_register(7)
            speed_target = xd
            exit_critical

            if is_speeding == 0:
                is_speeding = 1
                if speed_thrd == 0:
                    global speed_thrd = run speed_thread()
                end
            end

            textmsg("speedl done")
        elif cmd == 12:
            textmsg("servoj")
            q = [0, 0, 0, 0, 0, 0]
            q[0] = read_input_float_register(0)
            q[1] = read_input_float_register(1)
            q[2] = read_input_float_register(2)
            q[3] = read_input_float_register(3)
            q[4] = read_input_float_register(4)
            q[5] = read_input_float_register(5)
            velocity = read_input_float_register(6)
            acceleration = read_input_float_register(7)

            enter_critical
            servo_target = q
            servo_time = read_input_float_register(8)
            servo_lookahead_time = read_input_float_register(9)
            servo_gain = read_input_float_register(10)
            exit_critical

            if is_servoing == 0:
                is_servoing = 1
                if servo_thrd == 0:
                    global servo_thrd = run servo_thread()
                end
            end
            textmsg("servoj done")
        elif cmd == 13:
            textmsg("servoc")
            pose = p[0, 0, 0, 0, 0, 0]
            pose[0] = read_input_float_register(0)
            pose[1] = read_input_float_register(1)
            pose[2] = read_input_float_register(2)
            pose[3] = read_input_float_register(3)
            pose[4] = read_input_float_register(4)
            pose[5] = read_input_float_register(5)
            velocity = read_input_float_register(6)
            acceleration = read_input_float_register(7)
            blend = read_input_float_register(8)
            textmsg("Target pose:")
            textmsg(pose)
            servoc(pose, a=acceleration, v=velocity, r=blend)
            stopj(20)
            textmsg("servoc done")
        elif cmd == 16:
            textmsg("speed_stop")
            enter_critical
            is_speeding = 0
            kill speed_thrd
            speed_thrd = 0
            if speed_type == 0:
                stopl(10)
            else:
                stopj(10)
            end
            exit_critical
            textmsg("speed_stop done")
        elif cmd == 17:
            textmsg("servo_stop")
            enter_critical
            is_servoing = 0
            kill servo_thrd
            servo_thrd = 0
            exit_critical
            stopj(20)
            textmsg("servo_stop done")
        elif cmd == 18:
            textmsg("set_payload")
            mass = read_input_float_register(0)
            cog_x = read_input_float_register(1)
            cog_y = read_input_float_register(2)
            cog_z = read_input_float_register(3)
            cog = [cog_x, cog_y, cog_z]
$V5         if cog_x == 0 and cog_y == 0 and cog_z == 0:
$V5             set_payload(mass, get_target_payload_cog())
$V5         else:
                set_payload(mass, cog)
$V5         end
$V5         textmsg("active payload:")
$V5         textmsg(get_target_payload())
            textmsg("set_payload done")
        elif cmd == 19:
            textmsg("teach_mode")
            teach_mode()
            textmsg("teach_mode done")
        elif cmd == 20:
            textmsg("end_teach_mode")
            end_teach_mode()
            textmsg("end_teach_mode done")
        elif cmd == 21:
            textmsg("force_mode_set_damping")
            damping = read_input_float_register(0)
            force_mode_set_damping(damping)
            textmsg("force_mode_set_damping done")
        elif cmd == 22:
            textmsg("force_mode_set_gain_scaling")
            scaling = read_input_float_register(0)
$V5         force_mode_set_gain_scaling(scaling)
            textmsg("force_mode_set_gain_scaling done")
        elif cmd == 255:
            textmsg("Received stop!")
        end

        return cmd != 255
    end

    #
    # RTDE Control script - Main loop
    #

    textmsg("RTDE Control Script Loaded")

    # Initialize force torque sensor
    zero_ftsensor()

    # Initialize gain and damping for force mode to a more stable default
$V5 force_mode_set_gain_scaling(0.5)
    force_mode_set_damping(0.025)

    keep_running = True
    executing_cmd = False
    signal_ready(1)

    while keep_running:
        if rtde_cmd() == 0:
            signal_ready(1)
            executing_cmd = False
        else:
            signal_ready(0)
            if not executing_cmd:
                keep_running = process_cmd()
            end
            executing_cmd = True
        end
        sync()
    end
    textmsg("RTDE Control Script Terminated")
end
run program
